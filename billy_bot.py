import random
import logging
import requests
from telebot import types, TeleBot
from bs4 import BeautifulSoup
from config import OWM_TOKEN, BOT_TOKEN
from pyowm import OWM
from pyowm.commons.exceptions import NotFoundError
from translate import Translator
from phrases import phrases

logging.basicConfig(level=logging.INFO)
translator = Translator(from_lang="en", to_lang="ru")
bot = TeleBot(BOT_TOKEN)


def get_weather(city_message):
    """Function for getting weather forecast"""
    try:
        owm = OWM(OWM_TOKEN)
        observation = owm.weather_manager().weather_at_place(city_message.text)
        weather = translator.translate(observation.weather.detailed_status)
        answer = f"–í –≥–æ—Ä–æ–¥–µ {city_message.text} —Å–µ–π—á–∞—Å {weather} \n"
        logging.info(f"–ë–∏–ª–ª–∏ —Å–∫–∞–∑–∞–ª –∫–∞–∫–∞—è –ø–æ–≥–æ–¥–∞ –≤ –≥–æ—Ä–æ–¥–µ {city_message.text}")
        bot.send_message(city_message.chat.id, answer)
    except NotFoundError:
        bot.send_message(city_message.chat.id, random.choice(phrases["wrong_city"]))


def get_joke():
    """Function for getting a random joke"""
    s = requests.get("http://anekdotme.ru/random")
    b = BeautifulSoup(s.text, "html.parser")
    p = b.select(".anekdot_text")
    for x in p:
        s = (x.getText().strip())
    return s


@bot.message_handler(commands=["start", "help"])
def send_welcome(message):
    # bot.reply_to(message, "")
    item1 = types.KeyboardButton("–ö–∞–∫–æ–π —É –º–µ–Ω—è —à–∞–Ω—Å –Ω–∞ swallow cum —Å–µ–≥–æ–¥–Ω—è?")
    item2 = types.KeyboardButton("–ö–∞–∫ –¥–µ–ª–∞, –ë–∏–ª–ª–∏?")
    item3 = types.KeyboardButton("–î–∞–π —Å–æ–≤–µ—Ç")
    item4 = types.KeyboardButton("–ë–∏–ª–ª–∏, –ø–æ–¥—Å–∫–∞–∂–∏ –ø–æ–≥–æ–¥—É")
    item5 = types.KeyboardButton("–†–∞—Å—Å–∫–∞–∂–∏ –∞–Ω–µ–∫–¥–æ—Ç")
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add(item1, item2, item3, item4, item5)
    bot.send_message(message.chat.id,
                     "\n–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é —Ç–µ–±—è –≤ –Ω–∞—à–µ–º —á–∞—Ç–µ\n –Ø - <b>{1.first_name}</b> –∏ —è –æ–∫—Ä—É–∂—É —Ç–µ–±—è –ª—é–±–æ–≤—å—é"
                     .format(message.from_user, bot.get_me()), parse_mode='html', reply_markup=markup)


@bot.message_handler(content_types=["text"])
def message_function(message):
    user_message = message.text.lower()
    user_message = [c for c in user_message if c in "–∞–±–≤–≥–¥–µ—ë–∂–∑–∏–π–∫–ª–º–Ω–æ–ø—Ä—Å—Ç—É—Ñ—Ö—Ü—á—à—â—ä—å—ç—é—è abcdefghijklmnopqrstuvwxyz"]
    user_message = "".join(user_message)

    if user_message == "–∫–∞–∫–æ–π —É –º–µ–Ω—è —à–∞–Ω—Å –Ω–∞ swallow cum —Å–µ–≥–æ–¥–Ω—è":
        swallow = random.randint(0, 100)
        if swallow == 100:
            bot.send_message(message.chat.id, f"\n–ë–æ–∂–µ –º–æ–π! –î–∞ —É –Ω–∞—Å –Ω–æ–≤—ã–π Boss of this gym, —Ç–≤–æ–π —à–∞–Ω—Å {str(swallow)}%")
        elif swallow == 69:
            bot.send_message(message.chat.id, f"\n–¶–µ–ª—ã—Ö üòè {str(swallow)} % üëÑüí¶üçÜü§º‚Äç‚ôÇÔ∏è")
        elif swallow == 0:
            bot.send_message(message.chat.id, "\nI don't do anal —Å —Ç–æ–±–æ–π, —à–∞–Ω—Å 0%")
        elif swallow >= 70:
            bot.send_message(message.chat.id, f"\n–¢—ã —É –Ω–∞—Å —Å–µ–≥–æ–¥–Ω—è –≤–µ–∑—É–Ω—á–∏–∫! –¢–≤–æ–π —à–∞–Ω—Å {str(swallow)}%")
        elif swallow <= 30:
            bot.send_message(message.chat.id, f"\n–°–µ–≥–æ–¥–Ω—è –Ω–µ —Ç–≤–æ–π –¥–µ–Ω—å, –¥—Ä—É–∂–æ–∫-–ø–∏—Ä–æ–∂–æ–∫, —à–∞–Ω—Å {str(swallow)}%((((")
        else:
            bot.send_message(message.chat.id, f"\n–†–æ–≤–Ω–æ {str(swallow)}%")

    elif user_message[:13] == "—Ä–∞—Å—Å–∫–∞–∂–∏ –∞–Ω–µ–∫" or user_message[:6] == "–∞–Ω–µ–∫–¥–æ":
        bot.send_message(message.chat.id, get_joke())
        logging.info("–ë–∏–ª–ª–∏ —Ä–∞—Å—Å–∫–∞–∑–∞–ª –∞–Ω–µ–∫–¥–æ—Ç")

    elif user_message[:5] == "—Ñ–∏–≥–Ω—è" or user_message[:5] == "–Ω–µ –æ—á":
        bot.send_message(message.chat.id, f"\n{random.choice(phrases['other_joke'])}\n")
        bot.send_message(message.chat.id, get_joke())
        logging.info("–ë–∏–ª–ª–∏ —Ä–∞—Å—Å–∫–∞–∑–∞–ª –∞–Ω–µ–∫–¥–æ—Ç")

    elif user_message[:6] == "—Å–º–µ—à–Ω–æ" or user_message[:7] == "—Ö–æ—Ä–æ—à–∏–π":
        bot.send_message(message.chat.id, "\n" + random.choice(phrases["good_joke"]))

    elif user_message[:7] == "—Å–ø–∞—Å–∏–±–æ":
        bot.send_message(message.chat.id, "\n" + random.choice(phrases["thanks"]))

    elif user_message[:2] == "—Ö–∞" or user_message[:2] == "–∞—Ö":
        bot.send_message(message.chat.id, "\n" + random.choice(phrases["hahaha"]))

    elif user_message[:15] == "—Ä–∞–¥ –≤–∏–¥–µ—Ç—å —Ç–µ–±—è" or user_message[:6] == "–ø—Ä–∏–≤–µ—Ç":
        bot.send_message(message.chat.id,
                         "\n–ü—Ä–∏–≤–µ—Ç, {0.first_name}, –∫–∞–∫–∏–µ –ª—é–¥–∏! Let's celebrate and suck some dick!".format(
                             message.from_user, bot.get_me()))

    elif user_message[:6] == "–ø–æ–∫–∞" or user_message[:6] == "–ø—Ä–æ—â–∞–π":
        bot.send_message(message.chat.id, random.choice(phrases["goodbye"]))

    elif user_message[:7] == "—Å—Ç—Ä–µ–ª—è–π":
        bot.send_message(message.chat.id,
                         "\n–¢—ã —Å–∞–º –Ω–∞–ø—Ä–æ—Å–∏–ª—Å—è {0.first_name}. –Ø –¥–æ—Å—Ç–∞—é —Å–≤–æ–π –æ–≥—Ä–æ–º–Ω—ã–π —Å—Ç–≤–æ–ª –∏...".format(
                             message.from_user, bot.get_me()))
        shoot = random.randint(1, 6)
        if shoot == 6:
            bot.send_message(message.chat.id, "\n–ë–∏–ª–ª–∏ —Å—Ç—Ä–µ–ª—è–µ—Ç –≤ {0.first_name} –∏ —É–±–∏–≤–∞–µ—Ç –µ–≥–æ"
                             .format(message.from_user, bot.get_me()))
        else:
            bot.send_message(message.chat.id,
                             "–ë–∏–ª–ª–∏ —Å—Ç—Ä–µ–ª—è–µ—Ç –≤ {0.first_name}, –Ω–æ —É –Ω–µ–≥–æ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –æ—Å–µ—á–∫–∞. {0.first_name} –≤—ã–∂–∏–≤–∞–µ—Ç".
                             format(message.from_user, bot.get_me()))

    elif user_message[:8] == "–∫–∞–∫ –¥–µ–ª–∞":
        markup = types.InlineKeyboardMarkup(row_width=2)
        item1 = types.InlineKeyboardButton("–•–æ—Ä–æ—à–æ", callback_data="good")
        item2 = types.InlineKeyboardButton("–ù–µ –æ—á–µ–Ω—å", callback_data="bad")
        item3 = types.InlineKeyboardButton("–¢—è–Ω–æ—á–∫—É —Ö–æ—á—É(((", callback_data="tyan")
        markup.add(item1, item2, item3)
        bot.send_message(message.chat.id, random.choice(phrases["billy_mood"]), reply_markup=markup)

    elif user_message[:9] == '–¥–∞–π —Å–æ–≤–µ—Ç':
        markup = types.InlineKeyboardMarkup(row_width=2)
        item1 = types.InlineKeyboardButton("–°–µ–π—á–∞—Å –∏–¥–µ—Ç –¥–æ–∂–¥—å", callback_data="rain")
        item2 = types.InlineKeyboardButton("–°–µ–π—á–∞—Å —Å–æ–ª–Ω–µ—á–Ω–æ", callback_data="shiny")
        markup.add(item1, item2)
        bot.send_message(message.chat.id, "–ö–∞–∫–∞—è —Å–µ–π—á–∞—Å –ø–æ–≥–æ–¥–∞?", reply_markup=markup)

    elif user_message == "–±–∏–ª–ª–∏ –ø–æ–¥—Å–∫–∞–∂–∏ –ø–æ–≥–æ–¥—É" or user_message[:6] == "–ø–æ–≥–æ–¥–∞":
        bot.send_message(message.chat.id, "–í –∫–∞–∫–æ–º –≥–æ—Ä–æ–¥–µ —Ç—ã —Ö–æ—á–µ—à—å —É–∑–Ω–∞—Ç—å –ø–æ–≥–æ–¥—É?")
        bot.register_next_step_handler(message, get_weather)

    else:
        plug = random.choice(phrases["plug_phrases"])
        bot.send_message(message.chat.id, plug)

    logging.info("–ë–∏–ª–ª–∏ –æ—Ç–≤–µ—Ç–∏–ª –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ")


@bot.callback_query_handler(func=lambda call: True)
def callback_func(call):
    try:
        bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,
                              text="Oh, I'm fucking cumming, –∞ —Ç—ã —Å–∞–º –∫–∞–∫?", reply_markup=None)
        if call.message:
            if call.data == "good":
                bot.send_message(call.message.chat.id, random.choice(phrases["good"]))
                bot.answer_callback_query(callback_query_id=call.id, show_alert=True,
                                          text="–£—Å—Ç–∞–Ω–æ–≤–∏–ª —Ç–µ–±–µ –º–∞–π–Ω–µ—Ä, –ø—Ä–æ–≤–µ—Ä—è–π))")
            elif call.data == "bad":
                bot.send_message(call.message.chat.id, random.choice(phrases["bad"]))
            elif call.data == "tyan":
                bot.send_message(call.message.chat.id, random.choice(phrases["tyan"]))
            elif call.data == "rain":
                bot.send_message(call.message.chat.id, random.choice(phrases["rainy"]))
            elif call.data == "shiny":
                bot.send_message(call.message.chat.id, random.choice(phrases["shiny"]))

        bot.answer_callback_query(callback_query_id=call.id)
        logging.info("–ë–∏–ª–ª–∏ –æ—Ç–≤–µ—Ç–∏–ª –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ")

    except Exception as e:
        print(repr(e))


bot.infinity_polling()
